project(PDFHUMMUS)
cmake_minimum_required(VERSION 2.6)

if(PDFHUMMUS_NO_AES)
    add_compile_definitions(PDFHUMMUS_NO_AES)
endif(PDFHUMMUS_NO_AES)

if(MSVC AND MSVC_USE_STATIC_RUNTIME)
    string(REPLACE "/MD" "/MT" CMAKE_CXX_FLAGS_DEBUG "${CMAKE_CXX_FLAGS_DEBUG}")
    set(CMAKE_CXX_FLAGS_DEBUG ${CMAKE_CXX_FLAGS_DEBUG})

    string(REPLACE "/MD" "/MT" CMAKE_CXX_FLAGS_MINSIZEREL "${CMAKE_CXX_FLAGS_MINSIZEREL}")
    set(CMAKE_CXX_FLAGS_MINSIZEREL ${CMAKE_CXX_FLAGS_MINSIZEREL})

    string(REPLACE "/MD" "/MT" CMAKE_CXX_FLAGS_RELEASE  "${CMAKE_C_FLAGS_RELEASE}_INIT")
    set(CMAKE_CXX_FLAGS_RELEASE ${CMAKE_CXX_FLAGS_RELEASE})

    string(REPLACE "/MD" "/MT" CMAKE_CXX_FLAGS_RELWITHDEBINFO "${CMAKE_CXX_FLAGS_RELWITHDEBINFO}")
    set(CMAKE_CXX_FLAGS_RELWITHDEBINFO ${CMAKE_CXX_FLAGS_RELWITHDEBINFO})

    string(REPLACE "/MD" "/MT" CMAKE_C_FLAGS_DEBUG "${CMAKE_C_FLAGS_DEBUG}")
    set(CMAKE_C_FLAGS_DEBUG ${CMAKE_C_FLAGS_DEBUG})

    string(REPLACE "/MD" "/MT" CMAKE_C_FLAGS_MINSIZEREL "${CMAKE_C_FLAGS_MINSIZEREL}")
    set(CMAKE_C_FLAGS_MINSIZEREL ${CMAKE_C_FLAGS_MINSIZEREL})

    string(REPLACE "/MD" "/MT" CMAKE_C_FLAGS_RELEASE "${CMAKE_C_FLAGS_RELEASE}")
    set(CMAKE_C_FLAGS_RELEASE ${CMAKE_C_FLAGS_RELEASE})

    string(REPLACE "/MD" "/MT" CMAKE_C_FLAGS_RELWITHDEBINFO "${CMAKE_C_FLAGS_RELWITHDEBINFO}")
    set(CMAKE_C_FLAGS_RELWITHDEBINFO ${CMAKE_C_FLAGS_RELWITHDEBINFO})
endif(MSVC AND MSVC_USE_STATIC_RUNTIME)

if(UNICODE_CHARSET)
    ADD_DEFINITIONS(-DUNICODE)
    ADD_DEFINITIONS(-D_UNICODE)
endif(UNICODE_CHARSET)

set(USE_BUNDLED TRUE CACHE BOOL "Whether to use bundled libraries")

if(NOT USE_BUNDLED)
    FIND_PACKAGE(PkgConfig)

    find_package (JPEG)
    if (NOT JPEG_FOUND)
        set (PDFHUMMUS_NO_DCT TRUE)
    endif (NOT JPEG_FOUND)

    PKG_CHECK_MODULES(ZLIB zlib REQUIRED)

    PKG_CHECK_MODULES(LIBTIFF libtiff-4)
    if(NOT LIBTIFF_FOUND)
        SET(PDFHUMMUS_NO_TIFF TRUE)
    else(NOT LIBTIFF_FOUND)
        ADD_DEFINITIONS(-D_INCLUDE_TIFF_HEADER)
    endif(NOT LIBTIFF_FOUND)

    PKG_CHECK_MODULES(FREETYPE REQUIRED freetype2)

    if(NOT PDFHUMMUS_NO_AES)
        if (MINGW OR FLATPAK)
            # FIXME: Fedora's MinGW environment doesn't provide LibAesgm
            # FIXME: Flatpak's Gnome runtime doesn't provide LibAesgm
            ADD_SUBDIRECTORY (LibAesgm)
        else (MINGW OR FLATPAK)
            FIND_PATH(LIBAESGM_INCLUDE_DIRS aescpp.h /usr/local/include/aes /usr/include/aes)
            FIND_LIBRARY(LIBAESGM_LDFLAGS NAMES aesgm PATHS /usr/local/lib${LIB_SUFFIX} /usr/lib${LIB_SUFFIX})
        endif (MINGW OR FLATPAK)
    endif(NOT PDFHUMMUS_NO_AES)

    PKG_CHECK_MODULES(LIBPNG libpng)
    if(NOT LIBPNG_FOUND)
        SET(PDFHUMMUS_NO_PNG TRUE)
    endif(NOT LIBPNG_FOUND)

else(NOT USE_BUNDLED)
    if(NOT PDFHUMMUS_NO_AES)
    ADD_SUBDIRECTORY(LibAesgm)
    endif(NOT PDFHUMMUS_NO_AES)
    if(NOT PDFHUMMUS_NO_DCT)
    ADD_SUBDIRECTORY(LibJpeg)
    endif(NOT PDFHUMMUS_NO_DCT)
    ADD_SUBDIRECTORY(ZLib)
    if(NOT PDFHUMMUS_NO_TIFF)
    ADD_SUBDIRECTORY(LibTiff)
    endif(NOT PDFHUMMUS_NO_TIFF)
    ADD_SUBDIRECTORY(FreeType)
    if(NOT PDFHUMMUS_NO_PNG)
    ADD_SUBDIRECTORY(LibPng)
    endif(NOT PDFHUMMUS_NO_PNG)
endif(NOT USE_BUNDLED)
ADD_SUBDIRECTORY(PDFWriter)
ADD_SUBDIRECTORY(PDFWriterTestPlayground)
